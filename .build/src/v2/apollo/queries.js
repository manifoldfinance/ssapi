"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PAIR_FROM_TOKENS = exports.SWAPS_BY_PAIR = exports.PAIR_RESERVES_BY_TOKENS = exports.TOP_PAIRS = exports.PAIRS_VOLUME_QUERY = void 0;
var graphql_tag_1 = __importDefault(require("graphql-tag"));
exports.PAIRS_VOLUME_QUERY = graphql_tag_1.default(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  query PairsVolume($limit: Int!, $pairIds: [ID!]!, $blockNumber: Int!) {\n    pairVolumes: pairs(first: $limit, where: { id_in: $pairIds }, block: { number: $blockNumber }) {\n      id\n      volumeToken0\n      volumeToken1\n    }\n  }\n"], ["\n  query PairsVolume($limit: Int!, $pairIds: [ID!]!, $blockNumber: Int!) {\n    pairVolumes: pairs(first: $limit, where: { id_in: $pairIds }, block: { number: $blockNumber }) {\n      id\n      volumeToken0\n      volumeToken1\n    }\n  }\n"
    // gets the top 1k pairs by USD reserves
])));
// gets the top 1k pairs by USD reserves
exports.TOP_PAIRS = graphql_tag_1.default(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  fragment TokenInfo on Token {\n    id\n    symbol\n    name\n  }\n\n  query TopPairs($limit: Int!, $excludeTokenIds: [String!]!) {\n    pairs(\n      first: $limit\n      orderBy: reserveUSD\n      orderDirection: desc\n      where: { token0_not_in: $excludeTokenIds, token1_not_in: $excludeTokenIds }\n    ) {\n      id\n      token0 {\n        ...TokenInfo\n      }\n      token1 {\n        ...TokenInfo\n      }\n      reserve0\n      reserve1\n      volumeToken0\n      volumeToken1\n    }\n  }\n"], ["\n  fragment TokenInfo on Token {\n    id\n    symbol\n    name\n  }\n\n  query TopPairs($limit: Int!, $excludeTokenIds: [String!]!) {\n    pairs(\n      first: $limit\n      orderBy: reserveUSD\n      orderDirection: desc\n      where: { token0_not_in: $excludeTokenIds, token1_not_in: $excludeTokenIds }\n    ) {\n      id\n      token0 {\n        ...TokenInfo\n      }\n      token1 {\n        ...TokenInfo\n      }\n      reserve0\n      reserve1\n      volumeToken0\n      volumeToken1\n    }\n  }\n"])));
exports.PAIR_RESERVES_BY_TOKENS = graphql_tag_1.default(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  query PairReserves($token0: String!, $token1: String!) {\n    pairs(where: { token0: $token0, token1: $token1 }) {\n      reserve0\n      reserve1\n    }\n  }\n"], ["\n  query PairReserves($token0: String!, $token1: String!) {\n    pairs(where: { token0: $token0, token1: $token1 }) {\n      reserve0\n      reserve1\n    }\n  }\n"])));
exports.SWAPS_BY_PAIR = graphql_tag_1.default(templateObject_4 || (templateObject_4 = __makeTemplateObject(["\n  query SwapsByPair($skip: Int!, $timestamp: BigInt!, $pairAddress: String!) {\n    swaps(\n      first: 500\n      skip: $skip\n      where: { timestamp_gte: $timestamp, pair: $pairAddress }\n      orderBy: timestamp\n      orderDirection: asc\n    ) {\n      id\n      timestamp\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n    }\n  }\n"], ["\n  query SwapsByPair($skip: Int!, $timestamp: BigInt!, $pairAddress: String!) {\n    swaps(\n      first: 500\n      skip: $skip\n      where: { timestamp_gte: $timestamp, pair: $pairAddress }\n      orderBy: timestamp\n      orderDirection: asc\n    ) {\n      id\n      timestamp\n      amount0In\n      amount0Out\n      amount1In\n      amount1Out\n    }\n  }\n"])));
exports.PAIR_FROM_TOKENS = graphql_tag_1.default(templateObject_5 || (templateObject_5 = __makeTemplateObject(["\n  query SwapsByTokens($token0: String!, $token1: String!) {\n    pairs(where: { token0: $token0, token1: $token1 }) {\n      id\n    }\n  }\n"], ["\n  query SwapsByTokens($token0: String!, $token1: String!) {\n    pairs(where: { token0: $token0, token1: $token1 }) {\n      id\n    }\n  }\n"])));
var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;
